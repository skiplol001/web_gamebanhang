package controller;

import java.io.IOException;
import java.sql.Connection;
import java.util.Collections;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import model.NguoiChoiDAO;
import model.VatPhamDAO;
import model.KhachHangDAO;
import model.PlayerData;
import model.KhachHang;
import model.Item;
import util.DBConnection;

@WebServlet(name = "GameController", urlPatterns = {"/game"})
public class GameController extends HttpServlet {

   private NguoiChoiDAO nguoiChoiDAO;
    private VatPhamDAO vatPhamDAO;
    private KhachHangDAO khachHangDAO;

    private boolean databaseConnected = false;

    @Override
    public void init() throws ServletException {
        System.out.println("ƒêang kh·ªüi t·∫°o GameController...");
        try {
            Connection testConn = DBConnection.getConnection();
            if (testConn != null) {
                System.out.println("K·∫øt n·ªëi database th√†nh c√¥ng! ‚úÖ");
                testConn.close();
                this.databaseConnected = true;

                // Kh·ªüi t·∫°o DAO ch·ªâ khi k·∫øt n·ªëi th√†nh c√¥ng
                this.nguoiChoiDAO = new NguoiChoiDAO();
                this.vatPhamDAO = new VatPhamDAO();
                this.khachHangDAO = new KhachHangDAO();

                System.out.println("Kh·ªüi t·∫°o GameController v√† c√°c DAO th√†nh c√¥ng!");
            } else {
                System.out.println("L·ªñI KH·ªûI T·∫†O: K·∫øt n·ªëi database th·∫•t b·∫°i! ‚ùå");
                this.databaseConnected = false;
            }
        } catch (Exception e) {
            System.err.println("L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o GameController: " + e.getMessage());
            e.printStackTrace();
            this.databaseConnected = false;
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession();
        Integer playerId = (Integer) session.getAttribute("playerId");

        if (playerId == null) {
            playerId = 1;
            session.setAttribute("playerId", playerId);
        }

        String action = request.getParameter("action");
        
        // --- X·ª≠ l√Ω L·ªói K·∫øt n·ªëi DB ---
        if (!databaseConnected) {
            request.setAttribute("errorMessage", "L·ªñI K·∫æT N·ªêI DB: D·ªØ li·ªáu game c√≥ th·ªÉ b·ªã thi·∫øu ho·∫∑c sai l·ªách.");
        }

        PlayerData playerData = null;
        List<Item> availableItems = Collections.emptyList();
        List<KhachHang> customerProfiles = Collections.emptyList();
        KhachHang currentCustomer = null;

        try {
            if (databaseConnected) {
                // 1. T·∫¢I D·ªÆ LI·ªÜU NG∆Ø·ªúI CH∆†I
                if ("new".equals(action)) {
                    nguoiChoiDAO.createNewPlayer(playerId, "Ch·ªß Qu√°n M·ªõi");
                    playerData = nguoiChoiDAO.loadPlayerData(playerId);
                } else {
                    playerData = nguoiChoiDAO.loadPlayerData(playerId);

                    if (playerData == null) {
                        nguoiChoiDAO.createNewPlayer(playerId, "Player1");
                        playerData = nguoiChoiDAO.loadPlayerData(playerId);
                    }
                }
                
               // 2. T·∫£i danh s√°ch v·∫≠t ph·∫©m c√≥ s·∫µn (Gi·ªØ nguy√™n logic c·ªßa b·∫°n)
                availableItems = vatPhamDAO.getAllAvailableItems();
                
                // 3. T·∫£i H·ªì s∆° Kh√°ch h√†ng G·ªëc (DEBUG HERE)
                System.out.println("üîé DEBUG CONTROLLER: B·∫Øt ƒë·∫ßu g·ªçi khachHangDAO.loadDailyCustomerProfiles()");
                customerProfiles = khachHangDAO.loadDailyCustomerProfiles(); 
                
                // 4. G√°n Kh√°ch h√†ng hi·ªán t·∫°i 
                if (customerProfiles != null && !customerProfiles.isEmpty()) {
                    
                    // DEBUG QUAN TR·ªåNG: Ki·ªÉm tra d·ªØ li·ªáu sau khi nh·∫≠n t·ª´ DAO
                    System.out.println("‚úÖ DEBUG CONTROLLER: ƒê√£ nh·∫≠n danh s√°ch kh√°ch h√†ng t·ª´ DAO. S·ªë l∆∞·ª£ng: " + customerProfiles.size());
                    currentCustomer = customerProfiles.get(0); 
                    System.out.println("üîé DEBUG CONTROLLER: Kh√°ch h√†ng hi·ªán t·∫°i (ƒë·∫ßu ti√™n): " + currentCustomer.toString());
                    
                } else {
                    System.out.println("‚ö†Ô∏è C·∫¢NH B√ÅO: Danh s√°ch h·ªì s∆° kh√°ch h√†ng G·ªëc ƒëang R·ªñNG. Kh√¥ng th·ªÉ g√°n currentCustomer.");
                    currentCustomer = null;
                }
            } else {
                System.out.println("B·ªé QUA: B·ªè qua t·∫£i d·ªØ li·ªáu game do l·ªói k·∫øt n·ªëi DB.");
            }

            // 5. Set attributes cho JSP
            // *** ƒê·∫¢M B·∫¢O T√äN BI·∫æN N√ÄY PH·∫¢I KH·ªöP CH√çNH X√ÅC V·ªöI JSP: ${customerProfiles} ***
            request.setAttribute("customerProfiles", customerProfiles); 
            request.setAttribute("currentCustomer", currentCustomer); 
            request.setAttribute("playerData", playerData);
            request.setAttribute("availableItems", availableItems);
            
            // Ki·ªÉm tra Null cho Inventory
            if (playerData != null && playerData.inventory != null) {
                request.setAttribute("inventory", playerData.inventory);
            } else {
                request.setAttribute("inventory", Collections.emptyMap()); 
            }

            request.setAttribute("databaseConnected", databaseConnected);

            // LU√îN chuy·ªÉn h∆∞·ªõng ƒë·∫øn game.jsp
            request.getRequestDispatcher("/game.jsp").forward(request, response);

        } catch (Exception e) {
            // X·ª≠ l√Ω l·ªói trong qu√° tr√¨nh t·∫£i d·ªØ li·ªáu (SQLException)
            System.err.println("‚ùå L·ªói x·ª≠ l√Ω game khi t·∫£i d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
            
            request.setAttribute("errorMessage", "L·ªói d·ªØ li·ªáu game nghi√™m tr·ªçng: " + e.getMessage());
            
            request.getRequestDispatcher("/game.jsp").forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        if (action != null) {
            System.out.println("X·ª≠ l√Ω h√†nh ƒë·ªông game: " + action);
            // üö® LOGIC X·ª¨ L√ù ACTIONS S·∫º ƒê∆Ø·ª¢C ƒê·∫∂T ·ªû ƒê√ÇY
        }

        // T·∫£i l·∫°i d·ªØ li·ªáu game sau khi x·ª≠ l√Ω POST
        doGet(request, response);
    }
}